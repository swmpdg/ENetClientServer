// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectionCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cl_sv_messages {

namespace {

const ::google::protobuf::Descriptor* ConnectionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionCmd_NetTableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionCmd_NetTableState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectionCmd_2eproto() {
  protobuf_AddDesc_ConnectionCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectionCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionCmd_descriptor_ = file->message_type(0);
  static const int ConnectionCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd, nettablestate_),
  };
  ConnectionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionCmd_descriptor_,
      ConnectionCmd::default_instance_,
      ConnectionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionCmd));
  ConnectionCmd_NetTableState_descriptor_ = ConnectionCmd_descriptor_->nested_type(0);
  static const int ConnectionCmd_NetTableState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd_NetTableState, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd_NetTableState, stringindex_),
  };
  ConnectionCmd_NetTableState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionCmd_NetTableState_descriptor_,
      ConnectionCmd_NetTableState::default_instance_,
      ConnectionCmd_NetTableState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd_NetTableState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionCmd_NetTableState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionCmd_NetTableState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectionCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionCmd_descriptor_, &ConnectionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionCmd_NetTableState_descriptor_, &ConnectionCmd_NetTableState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectionCmd_2eproto() {
  delete ConnectionCmd::default_instance_;
  delete ConnectionCmd_reflection_;
  delete ConnectionCmd_NetTableState::default_instance_;
  delete ConnectionCmd_NetTableState_reflection_;
}

void protobuf_AddDesc_ConnectionCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ConnectionCmd.proto\022\016cl_sv_messages\"\231\001"
    "\n\rConnectionCmd\022\r\n\005stage\030\001 \002(\r\022B\n\rnetTab"
    "leState\030\002 \001(\0132+.cl_sv_messages.Connectio"
    "nCmd.NetTableState\0325\n\rNetTableState\022\017\n\007t"
    "ableID\030\001 \002(\r\022\023\n\013stringIndex\030\002 \002(\r", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectionCmd.proto", &protobuf_RegisterTypes);
  ConnectionCmd::default_instance_ = new ConnectionCmd();
  ConnectionCmd_NetTableState::default_instance_ = new ConnectionCmd_NetTableState();
  ConnectionCmd::default_instance_->InitAsDefaultInstance();
  ConnectionCmd_NetTableState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectionCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectionCmd_2eproto {
  StaticDescriptorInitializer_ConnectionCmd_2eproto() {
    protobuf_AddDesc_ConnectionCmd_2eproto();
  }
} static_descriptor_initializer_ConnectionCmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConnectionCmd_NetTableState::kTableIDFieldNumber;
const int ConnectionCmd_NetTableState::kStringIndexFieldNumber;
#endif  // !_MSC_VER

ConnectionCmd_NetTableState::ConnectionCmd_NetTableState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cl_sv_messages.ConnectionCmd.NetTableState)
}

void ConnectionCmd_NetTableState::InitAsDefaultInstance() {
}

ConnectionCmd_NetTableState::ConnectionCmd_NetTableState(const ConnectionCmd_NetTableState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cl_sv_messages.ConnectionCmd.NetTableState)
}

void ConnectionCmd_NetTableState::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  stringindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionCmd_NetTableState::~ConnectionCmd_NetTableState() {
  // @@protoc_insertion_point(destructor:cl_sv_messages.ConnectionCmd.NetTableState)
  SharedDtor();
}

void ConnectionCmd_NetTableState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionCmd_NetTableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionCmd_NetTableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionCmd_NetTableState_descriptor_;
}

const ConnectionCmd_NetTableState& ConnectionCmd_NetTableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionCmd_2eproto();
  return *default_instance_;
}

ConnectionCmd_NetTableState* ConnectionCmd_NetTableState::default_instance_ = NULL;

ConnectionCmd_NetTableState* ConnectionCmd_NetTableState::New() const {
  return new ConnectionCmd_NetTableState;
}

void ConnectionCmd_NetTableState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConnectionCmd_NetTableState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, stringindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionCmd_NetTableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cl_sv_messages.ConnectionCmd.NetTableState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tableID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stringIndex;
        break;
      }

      // required uint32 stringIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_stringIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stringindex_)));
          set_has_stringindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cl_sv_messages.ConnectionCmd.NetTableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cl_sv_messages.ConnectionCmd.NetTableState)
  return false;
#undef DO_
}

void ConnectionCmd_NetTableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cl_sv_messages.ConnectionCmd.NetTableState)
  // required uint32 tableID = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // required uint32 stringIndex = 2;
  if (has_stringindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stringindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cl_sv_messages.ConnectionCmd.NetTableState)
}

::google::protobuf::uint8* ConnectionCmd_NetTableState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cl_sv_messages.ConnectionCmd.NetTableState)
  // required uint32 tableID = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // required uint32 stringIndex = 2;
  if (has_stringindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stringindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cl_sv_messages.ConnectionCmd.NetTableState)
  return target;
}

int ConnectionCmd_NetTableState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tableID = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // required uint32 stringIndex = 2;
    if (has_stringindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stringindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionCmd_NetTableState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionCmd_NetTableState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionCmd_NetTableState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionCmd_NetTableState::MergeFrom(const ConnectionCmd_NetTableState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_stringindex()) {
      set_stringindex(from.stringindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionCmd_NetTableState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionCmd_NetTableState::CopyFrom(const ConnectionCmd_NetTableState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionCmd_NetTableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnectionCmd_NetTableState::Swap(ConnectionCmd_NetTableState* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(stringindex_, other->stringindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionCmd_NetTableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionCmd_NetTableState_descriptor_;
  metadata.reflection = ConnectionCmd_NetTableState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ConnectionCmd::kStageFieldNumber;
const int ConnectionCmd::kNetTableStateFieldNumber;
#endif  // !_MSC_VER

ConnectionCmd::ConnectionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cl_sv_messages.ConnectionCmd)
}

void ConnectionCmd::InitAsDefaultInstance() {
  nettablestate_ = const_cast< ::cl_sv_messages::ConnectionCmd_NetTableState*>(&::cl_sv_messages::ConnectionCmd_NetTableState::default_instance());
}

ConnectionCmd::ConnectionCmd(const ConnectionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cl_sv_messages.ConnectionCmd)
}

void ConnectionCmd::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  nettablestate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionCmd::~ConnectionCmd() {
  // @@protoc_insertion_point(destructor:cl_sv_messages.ConnectionCmd)
  SharedDtor();
}

void ConnectionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete nettablestate_;
  }
}

void ConnectionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionCmd_descriptor_;
}

const ConnectionCmd& ConnectionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionCmd_2eproto();
  return *default_instance_;
}

ConnectionCmd* ConnectionCmd::default_instance_ = NULL;

ConnectionCmd* ConnectionCmd::New() const {
  return new ConnectionCmd;
}

void ConnectionCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    stage_ = 0u;
    if (has_nettablestate()) {
      if (nettablestate_ != NULL) nettablestate_->::cl_sv_messages::ConnectionCmd_NetTableState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cl_sv_messages.ConnectionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_netTableState;
        break;
      }

      // optional .cl_sv_messages.ConnectionCmd.NetTableState netTableState = 2;
      case 2: {
        if (tag == 18) {
         parse_netTableState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nettablestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cl_sv_messages.ConnectionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cl_sv_messages.ConnectionCmd)
  return false;
#undef DO_
}

void ConnectionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cl_sv_messages.ConnectionCmd)
  // required uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  // optional .cl_sv_messages.ConnectionCmd.NetTableState netTableState = 2;
  if (has_nettablestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nettablestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cl_sv_messages.ConnectionCmd)
}

::google::protobuf::uint8* ConnectionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cl_sv_messages.ConnectionCmd)
  // required uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  // optional .cl_sv_messages.ConnectionCmd.NetTableState netTableState = 2;
  if (has_nettablestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nettablestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cl_sv_messages.ConnectionCmd)
  return target;
}

int ConnectionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // optional .cl_sv_messages.ConnectionCmd.NetTableState netTableState = 2;
    if (has_nettablestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nettablestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionCmd::MergeFrom(const ConnectionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_nettablestate()) {
      mutable_nettablestate()->::cl_sv_messages::ConnectionCmd_NetTableState::MergeFrom(from.nettablestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionCmd::CopyFrom(const ConnectionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nettablestate()) {
    if (!this->nettablestate().IsInitialized()) return false;
  }
  return true;
}

void ConnectionCmd::Swap(ConnectionCmd* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(nettablestate_, other->nettablestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionCmd_descriptor_;
  metadata.reflection = ConnectionCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cl_sv_messages

// @@protoc_insertion_point(global_scope)

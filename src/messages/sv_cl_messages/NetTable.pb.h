// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetTable.proto

#ifndef PROTOBUF_NetTable_2eproto__INCLUDED
#define PROTOBUF_NetTable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sv_cl_messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NetTable_2eproto();
void protobuf_AssignDesc_NetTable_2eproto();
void protobuf_ShutdownFile_NetTable_2eproto();

class NetTable;

enum NetTable_Command {
  NetTable_Command_CREATE = 0,
  NetTable_Command_CLEAR = 1,
  NetTable_Command_UPDATE = 2
};
bool NetTable_Command_IsValid(int value);
const NetTable_Command NetTable_Command_Command_MIN = NetTable_Command_CREATE;
const NetTable_Command NetTable_Command_Command_MAX = NetTable_Command_UPDATE;
const int NetTable_Command_Command_ARRAYSIZE = NetTable_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetTable_Command_descriptor();
inline const ::std::string& NetTable_Command_Name(NetTable_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetTable_Command_descriptor(), value);
}
inline bool NetTable_Command_Parse(
    const ::std::string& name, NetTable_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetTable_Command>(
    NetTable_Command_descriptor(), name, value);
}
// ===================================================================

class NetTable : public ::google::protobuf::Message {
 public:
  NetTable();
  virtual ~NetTable();

  NetTable(const NetTable& from);

  inline NetTable& operator=(const NetTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetTable& default_instance();

  enum OneofTableIDCase {
    kName = 2,
    kTableID = 3,
    ONEOF_TABLEID_NOT_SET = 0,
  };

  void Swap(NetTable* other);

  // implements Message ----------------------------------------------

  NetTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetTable& from);
  void MergeFrom(const NetTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NetTable_Command Command;
  static const Command CREATE = NetTable_Command_CREATE;
  static const Command CLEAR = NetTable_Command_CLEAR;
  static const Command UPDATE = NetTable_Command_UPDATE;
  static inline bool Command_IsValid(int value) {
    return NetTable_Command_IsValid(value);
  }
  static const Command Command_MIN =
    NetTable_Command_Command_MIN;
  static const Command Command_MAX =
    NetTable_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    NetTable_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return NetTable_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return NetTable_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return NetTable_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .sv_cl_messages.NetTable.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::sv_cl_messages::NetTable_Command command() const;
  inline void set_command(::sv_cl_messages::NetTable_Command value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 tableID = 3;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 3;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  inline OneofTableIDCase oneof_tableID_case() const;
  // @@protoc_insertion_point(class_scope:sv_cl_messages.NetTable)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_name();
  inline void set_has_tableid();
  inline void set_has_data();
  inline void clear_has_data();

  inline bool has_oneof_tableID();
  void clear_oneof_tableID();
  inline void clear_has_oneof_tableID();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  int command_;
  union OneofTableIDUnion {
    ::std::string* name_;
    ::google::protobuf::uint32 tableid_;
  } oneof_tableID_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_NetTable_2eproto();
  friend void protobuf_AssignDesc_NetTable_2eproto();
  friend void protobuf_ShutdownFile_NetTable_2eproto();

  void InitAsDefaultInstance();
  static NetTable* default_instance_;
};
// ===================================================================


// ===================================================================

// NetTable

// required .sv_cl_messages.NetTable.Command command = 1;
inline bool NetTable::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetTable::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetTable::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetTable::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::sv_cl_messages::NetTable_Command NetTable::command() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.NetTable.command)
  return static_cast< ::sv_cl_messages::NetTable_Command >(command_);
}
inline void NetTable::set_command(::sv_cl_messages::NetTable_Command value) {
  assert(::sv_cl_messages::NetTable_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:sv_cl_messages.NetTable.command)
}

// optional string name = 2;
inline bool NetTable::has_name() const {
  return oneof_tableID_case() == kName;
}
inline void NetTable::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void NetTable::clear_name() {
  if (has_name()) {
    delete oneof_tableID_.name_;
    clear_has_oneof_tableID();
  }
}
inline const ::std::string& NetTable::name() const {
  if (has_name()) {
    return *oneof_tableID_.name_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NetTable::set_name(const ::std::string& value) {
  if (!has_name()) {
    clear_oneof_tableID();
    set_has_name();
    oneof_tableID_.name_ = new ::std::string;
  }
  oneof_tableID_.name_->assign(value);
}
inline void NetTable::set_name(const char* value) {
  if (!has_name()) {
    clear_oneof_tableID();
    set_has_name();
    oneof_tableID_.name_ = new ::std::string;
  }
  oneof_tableID_.name_->assign(value);
}
inline void NetTable::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_oneof_tableID();
    set_has_name();
    oneof_tableID_.name_ = new ::std::string;
  }
  oneof_tableID_.name_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetTable::mutable_name() {
  if (!has_name()) {
    clear_oneof_tableID();
    set_has_name();
    oneof_tableID_.name_ = new ::std::string;
  }
  return oneof_tableID_.name_;
}
inline ::std::string* NetTable::release_name() {
  if (has_name()) {
    clear_has_oneof_tableID();
    ::std::string* temp = oneof_tableID_.name_;
    oneof_tableID_.name_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NetTable::set_allocated_name(::std::string* name) {
  clear_oneof_tableID();
  if (name) {
    set_has_name();
    oneof_tableID_.name_ = name;
  }
}

// optional uint32 tableID = 3;
inline bool NetTable::has_tableid() const {
  return oneof_tableID_case() == kTableID;
}
inline void NetTable::set_has_tableid() {
  _oneof_case_[0] = kTableID;
}
inline void NetTable::clear_tableid() {
  if (has_tableid()) {
    oneof_tableID_.tableid_ = 0u;
    clear_has_oneof_tableID();
  }
}
inline ::google::protobuf::uint32 NetTable::tableid() const {
  if (has_tableid()) {
    return oneof_tableID_.tableid_;
  }
  return 0u;
}
inline void NetTable::set_tableid(::google::protobuf::uint32 value) {
  if (!has_tableid()) {
    clear_oneof_tableID();
    set_has_tableid();
  }
  oneof_tableID_.tableid_ = value;
}

// optional bytes data = 4;
inline bool NetTable::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetTable::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetTable::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetTable::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& NetTable::data() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.NetTable.data)
  return *data_;
}
inline void NetTable::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:sv_cl_messages.NetTable.data)
}
inline void NetTable::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:sv_cl_messages.NetTable.data)
}
inline void NetTable::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sv_cl_messages.NetTable.data)
}
inline ::std::string* NetTable::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sv_cl_messages.NetTable.data)
  return data_;
}
inline ::std::string* NetTable::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetTable::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sv_cl_messages.NetTable.data)
}

inline bool NetTable::has_oneof_tableID() {
  return oneof_tableID_case() != ONEOF_TABLEID_NOT_SET;
}
inline void NetTable::clear_has_oneof_tableID() {
  _oneof_case_[0] = ONEOF_TABLEID_NOT_SET;
}
inline NetTable::OneofTableIDCase NetTable::oneof_tableID_case() const {
  return NetTable::OneofTableIDCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace sv_cl_messages

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sv_cl_messages::NetTable_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sv_cl_messages::NetTable_Command>() {
  return ::sv_cl_messages::NetTable_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetTable_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInfo.proto

#ifndef PROTOBUF_ServerInfo_2eproto__INCLUDED
#define PROTOBUF_ServerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sv_cl_messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerInfo_2eproto();
void protobuf_AssignDesc_ServerInfo_2eproto();
void protobuf_ShutdownFile_ServerInfo_2eproto();

class ServerInfo;

// ===================================================================

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ipAddress = 1;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  static const int kIpAddressFieldNumber = 1;
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const char* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  inline ::std::string* release_ipaddress();
  inline void set_allocated_ipaddress(::std::string* ipaddress);

  // required string hostName = 2;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostNameFieldNumber = 2;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:sv_cl_messages.ServerInfo)
 private:
  inline void set_has_ipaddress();
  inline void clear_has_ipaddress();
  inline void set_has_hostname();
  inline void clear_has_hostname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ipaddress_;
  ::std::string* hostname_;
  friend void  protobuf_AddDesc_ServerInfo_2eproto();
  friend void protobuf_AssignDesc_ServerInfo_2eproto();
  friend void protobuf_ShutdownFile_ServerInfo_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerInfo

// required string ipAddress = 1;
inline bool ServerInfo::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_ipaddress() {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_->clear();
  }
  clear_has_ipaddress();
}
inline const ::std::string& ServerInfo::ipaddress() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.ServerInfo.ipAddress)
  return *ipaddress_;
}
inline void ServerInfo::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
  // @@protoc_insertion_point(field_set:sv_cl_messages.ServerInfo.ipAddress)
}
inline void ServerInfo::set_ipaddress(const char* value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:sv_cl_messages.ServerInfo.ipAddress)
}
inline void ServerInfo::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sv_cl_messages.ServerInfo.ipAddress)
}
inline ::std::string* ServerInfo::mutable_ipaddress() {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sv_cl_messages.ServerInfo.ipAddress)
  return ipaddress_;
}
inline ::std::string* ServerInfo::release_ipaddress() {
  clear_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipaddress_;
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (ipaddress) {
    set_has_ipaddress();
    ipaddress_ = ipaddress;
  } else {
    clear_has_ipaddress();
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sv_cl_messages.ServerInfo.ipAddress)
}

// required string hostName = 2;
inline bool ServerInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& ServerInfo::hostname() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.ServerInfo.hostName)
  return *hostname_;
}
inline void ServerInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:sv_cl_messages.ServerInfo.hostName)
}
inline void ServerInfo::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:sv_cl_messages.ServerInfo.hostName)
}
inline void ServerInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sv_cl_messages.ServerInfo.hostName)
}
inline ::std::string* ServerInfo::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sv_cl_messages.ServerInfo.hostName)
  return hostname_;
}
inline ::std::string* ServerInfo::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sv_cl_messages.ServerInfo.hostName)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sv_cl_messages

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerInfo_2eproto__INCLUDED

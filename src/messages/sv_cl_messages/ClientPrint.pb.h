// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientPrint.proto

#ifndef PROTOBUF_ClientPrint_2eproto__INCLUDED
#define PROTOBUF_ClientPrint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sv_cl_messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientPrint_2eproto();
void protobuf_AssignDesc_ClientPrint_2eproto();
void protobuf_ShutdownFile_ClientPrint_2eproto();

class ClientPrint;

enum ClientPrint_Type {
  ClientPrint_Type_CONSOLE = 0
};
bool ClientPrint_Type_IsValid(int value);
const ClientPrint_Type ClientPrint_Type_Type_MIN = ClientPrint_Type_CONSOLE;
const ClientPrint_Type ClientPrint_Type_Type_MAX = ClientPrint_Type_CONSOLE;
const int ClientPrint_Type_Type_ARRAYSIZE = ClientPrint_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientPrint_Type_descriptor();
inline const ::std::string& ClientPrint_Type_Name(ClientPrint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientPrint_Type_descriptor(), value);
}
inline bool ClientPrint_Type_Parse(
    const ::std::string& name, ClientPrint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientPrint_Type>(
    ClientPrint_Type_descriptor(), name, value);
}
// ===================================================================

class ClientPrint : public ::google::protobuf::Message {
 public:
  ClientPrint();
  virtual ~ClientPrint();

  ClientPrint(const ClientPrint& from);

  inline ClientPrint& operator=(const ClientPrint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPrint& default_instance();

  void Swap(ClientPrint* other);

  // implements Message ----------------------------------------------

  ClientPrint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPrint& from);
  void MergeFrom(const ClientPrint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientPrint_Type Type;
  static const Type CONSOLE = ClientPrint_Type_CONSOLE;
  static inline bool Type_IsValid(int value) {
    return ClientPrint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClientPrint_Type_Type_MIN;
  static const Type Type_MAX =
    ClientPrint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClientPrint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ClientPrint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ClientPrint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ClientPrint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .sv_cl_messages.ClientPrint.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::sv_cl_messages::ClientPrint_Type type() const;
  inline void set_type(::sv_cl_messages::ClientPrint_Type value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:sv_cl_messages.ClientPrint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  int type_;
  friend void  protobuf_AddDesc_ClientPrint_2eproto();
  friend void protobuf_AssignDesc_ClientPrint_2eproto();
  friend void protobuf_ShutdownFile_ClientPrint_2eproto();

  void InitAsDefaultInstance();
  static ClientPrint* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientPrint

// required .sv_cl_messages.ClientPrint.Type type = 1;
inline bool ClientPrint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPrint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPrint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPrint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::sv_cl_messages::ClientPrint_Type ClientPrint::type() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.ClientPrint.type)
  return static_cast< ::sv_cl_messages::ClientPrint_Type >(type_);
}
inline void ClientPrint::set_type(::sv_cl_messages::ClientPrint_Type value) {
  assert(::sv_cl_messages::ClientPrint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sv_cl_messages.ClientPrint.type)
}

// required string message = 2;
inline bool ClientPrint::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPrint::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPrint::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPrint::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ClientPrint::message() const {
  // @@protoc_insertion_point(field_get:sv_cl_messages.ClientPrint.message)
  return *message_;
}
inline void ClientPrint::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:sv_cl_messages.ClientPrint.message)
}
inline void ClientPrint::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:sv_cl_messages.ClientPrint.message)
}
inline void ClientPrint::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sv_cl_messages.ClientPrint.message)
}
inline ::std::string* ClientPrint::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sv_cl_messages.ClientPrint.message)
  return message_;
}
inline ::std::string* ClientPrint::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientPrint::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sv_cl_messages.ClientPrint.message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sv_cl_messages

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sv_cl_messages::ClientPrint_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sv_cl_messages::ClientPrint_Type>() {
  return ::sv_cl_messages::ClientPrint_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientPrint_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetTable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetTable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sv_cl_messages {

namespace {

const ::google::protobuf::Descriptor* NetTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetTable_reflection_ = NULL;
struct NetTableOneofInstance {
  const ::std::string* name_;
  ::google::protobuf::uint32 tableid_;
}* NetTable_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* NetTable_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetTable_2eproto() {
  protobuf_AddDesc_NetTable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetTable.proto");
  GOOGLE_CHECK(file != NULL);
  NetTable_descriptor_ = file->message_type(0);
  static const int NetTable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, command_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NetTable_default_oneof_instance_, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NetTable_default_oneof_instance_, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, oneof_tableID_),
  };
  NetTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetTable_descriptor_,
      NetTable::default_instance_,
      NetTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, _unknown_fields_),
      -1,
      NetTable_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetTable, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetTable));
  NetTable_Command_descriptor_ = NetTable_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetTable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetTable_descriptor_, &NetTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetTable_2eproto() {
  delete NetTable::default_instance_;
  delete NetTable_default_oneof_instance_;
  delete NetTable_reflection_;
}

void protobuf_AddDesc_NetTable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NetTable.proto\022\016sv_cl_messages\"\241\001\n\010Net"
    "Table\0221\n\007command\030\001 \002(\0162 .sv_cl_messages."
    "NetTable.Command\022\016\n\004name\030\002 \001(\tH\000\022\021\n\007tabl"
    "eID\030\003 \001(\rH\000\022\014\n\004data\030\004 \001(\014\" \n\007Command\022\t\n\005"
    "CLEAR\020\000\022\n\n\006UPDATE\020\001B\017\n\roneof_tableID", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetTable.proto", &protobuf_RegisterTypes);
  NetTable::default_instance_ = new NetTable();
  NetTable_default_oneof_instance_ = new NetTableOneofInstance;
  NetTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetTable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetTable_2eproto {
  StaticDescriptorInitializer_NetTable_2eproto() {
    protobuf_AddDesc_NetTable_2eproto();
  }
} static_descriptor_initializer_NetTable_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NetTable_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetTable_Command_descriptor_;
}
bool NetTable_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetTable_Command NetTable::CLEAR;
const NetTable_Command NetTable::UPDATE;
const NetTable_Command NetTable::Command_MIN;
const NetTable_Command NetTable::Command_MAX;
const int NetTable::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetTable::kCommandFieldNumber;
const int NetTable::kNameFieldNumber;
const int NetTable::kTableIDFieldNumber;
const int NetTable::kDataFieldNumber;
#endif  // !_MSC_VER

NetTable::NetTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sv_cl_messages.NetTable)
}

void NetTable::InitAsDefaultInstance() {
  NetTable_default_oneof_instance_->name_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
  NetTable_default_oneof_instance_->tableid_ = 0u;
}

NetTable::NetTable(const NetTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sv_cl_messages.NetTable)
}

void NetTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_oneof_tableID();
}

NetTable::~NetTable() {
  // @@protoc_insertion_point(destructor:sv_cl_messages.NetTable)
  SharedDtor();
}

void NetTable::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (has_oneof_tableID()) {
    clear_oneof_tableID();
  }
  if (this != default_instance_) {
  }
}

void NetTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetTable_descriptor_;
}

const NetTable& NetTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetTable_2eproto();
  return *default_instance_;
}

NetTable* NetTable::default_instance_ = NULL;

NetTable* NetTable::New() const {
  return new NetTable;
}

void NetTable::clear_oneof_tableID() {
  switch(oneof_tableID_case()) {
    case kName: {
      delete oneof_tableID_.name_;
      break;
    }
    case kTableID: {
      // No need to clear
      break;
    }
    case ONEOF_TABLEID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_TABLEID_NOT_SET;
}


void NetTable::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    command_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  clear_oneof_tableID();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sv_cl_messages.NetTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sv_cl_messages.NetTable.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sv_cl_messages::NetTable_Command_IsValid(value)) {
            set_command(static_cast< ::sv_cl_messages::NetTable_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tableID;
        break;
      }

      // optional uint32 tableID = 3;
      case 3: {
        if (tag == 24) {
         parse_tableID:
          clear_oneof_tableID();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_tableID_.tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sv_cl_messages.NetTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sv_cl_messages.NetTable)
  return false;
#undef DO_
}

void NetTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sv_cl_messages.NetTable)
  // required .sv_cl_messages.NetTable.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 tableID = 3;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tableid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sv_cl_messages.NetTable)
}

::google::protobuf::uint8* NetTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sv_cl_messages.NetTable)
  // required .sv_cl_messages.NetTable.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 tableID = 3;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tableid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sv_cl_messages.NetTable)
  return target;
}

int NetTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sv_cl_messages.NetTable.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  switch (oneof_tableID_case()) {
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional uint32 tableID = 3;
    case kTableID: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
      break;
    }
    case ONEOF_TABLEID_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetTable::MergeFrom(const NetTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.oneof_tableID_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kTableID: {
      set_tableid(from.tableid());
      break;
    }
    case ONEOF_TABLEID_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetTable::CopyFrom(const NetTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetTable::Swap(NetTable* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(data_, other->data_);
    std::swap(oneof_tableID_, other->oneof_tableID_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetTable_descriptor_;
  metadata.reflection = NetTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sv_cl_messages

// @@protoc_insertion_point(global_scope)
